import base64, json, hmac, hashlib, time
import streamlit as st

st.set_page_config(page_title="Mini Clicker", page_icon="üñ±Ô∏è", layout="centered")

# –°–µ–∫—Ä–µ—Ç—ã –≤ Streamlit (Manage app ‚Üí Settings ‚Üí Secrets)
BOT_USERNAME = st.secrets.get("put_in_coin_bot")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: put_in_coin_bot
BOT_TOKEN    = st.secrets.get("8344313198:AAHRR7gjXU7KDlg5ZzMyATMxvp2bHr1pT9k")              # –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ initData (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

# --- 1) –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å user –ø—Ä—è–º–æ –∏–∑ query (–±–æ—Ç –µ–≥–æ —Ç—É–¥–∞ –ø–æ–ª–æ–∂–∏–ª) ---
params = st.experimental_get_query_params()
user_from_bot = {
    "id": int(params["id"][0]) if "id" in params else None,
    "first_name": params.get("first_name", [None])[0],
    "last_name": params.get("last_name", [None])[0],
    "username": params.get("username", [None])[0],
    "photo_url": None,  # —Ñ–æ—Ç–æ –ø–æ–∫–∞ –Ω–µ—Ç (—Å–º. –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –Ω–∏–∂–µ)
}

# --- 2) –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º –¥–æ–±—Ä–∞—Ç—å user/initData —á–µ—Ä–µ–∑ Telegram WebApp SDK (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ WebView) ---
js_bootstrap = """
<script>
(function(){
  // –ü–æ–¥–∫–ª—é—á–∏–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π SDK (–Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è)
  if (!window.Telegram || !window.Telegram.WebApp) {
    var s = document.createElement('script');
    s.src = "https://telegram.org/js/telegram-web-app.js";
    document.head.appendChild(s);
  }

  let tries = 0;
  function getWebApp(){
    return (window.Telegram && window.Telegram.WebApp) ||
           (window.parent && window.parent.Telegram && window.parent.Telegram.WebApp) ||
           (window.top && window.top.Telegram && window.top.Telegram.WebApp) || null;
  }
  function init(){
    tries++;
    const W = getWebApp();
    if (!W || !W.initDataUnsafe) {
      if (tries < 100) return setTimeout(init, 100); // –∂–¥—ë–º –¥–æ ~10 —Å–µ–∫
      return;
    }
    try {
      if (typeof W.ready === "function") W.ready();

      const url = new URL(window.location.href);

      if (!url.searchParams.get("tg_user_b64")) {
        const u = W.initDataUnsafe.user || null;
        if (u) {
          const payload = {
            id: u.id, first_name: u.first_name || null, last_name: u.last_name || null,
            username: u.username || null, language_code: u.language_code || null,
            is_premium: u.is_premium || null, photo_url: u.photo_url || null
          };
          const enc = btoa(unescape(encodeURIComponent(JSON.stringify(payload))));
          url.searchParams.set("tg_user_b64", enc);
        }
      }
      if (!url.searchParams.get("tg_init") && W.initData) {
        url.searchParams.set("tg_init", W.initData);
      }
      if (!sessionStorage.getItem("miniapp_init_done")) {
        sessionStorage.setItem("miniapp_init_done", "1");
        history.replaceState(null, "", url.toString());
        location.reload();
      }
    } catch(e) { console.log("bootstrap error:", e); }
  }
  init();
})();
</script>
"""
st.components.v1.html(js_bootstrap, height=0)

# –ß–∏—Ç–∞–µ–º —Ç–æ, —á—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–≥ –ø–æ–ª–æ–∂–∏—Ç—å JS
params = st.experimental_get_query_params()
user_b64 = (params.get("tg_user_b64") or [None])[0]
tg_init  = (params.get("tg_init") or [None])[0]

def parse_tg_user_b64(b64):
    if not b64: return None
    try:
        return json.loads(base64.b64decode(b64).decode("utf-8"))
    except Exception:
        return None

def validate_init_data(init_data: str) -> bool:
    if not (init_data and BOT_TOKEN): return False
    try:
        items = sorted([kv for kv in init_data.split("&") if not kv.startswith("hash=")])
        data_check_string = "\n".join(items)
        secret_key = hashlib.sha256(BOT_TOKEN.encode()).digest()
        h = hmac.new(secret_key, data_check_string.encode(), hashlib.sha256).hexdigest()
        supplied_hash = dict([kv.split("=",1) for kv in init_data.split("&")]).get("hash", "")
        return h == supplied_hash
    except Exception:
        return False

tg_user_js = parse_tg_user_b64(user_b64)
is_valid   = validate_init_data(tg_init)

# –í—ã–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ user: JS > –±–æ—Ç > None
tg_user = tg_user_js or (user_from_bot if user_from_bot["id"] else None)

# --- UI ---
st.title("Mini Clicker üñ±Ô∏è")
st.caption("Streamlit MiniApp –¥–ª—è Telegram")

if not tg_user:
    st.warning("–ü–æ—Ö–æ–∂–µ, –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–∑ Telegram. –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–∫—Ä—ã—Ç—å –∫–ª–∏–∫–µ—Ä¬ª.")
    if BOT_USERNAME:
        st.link_button("–û—Ç–∫—Ä—ã—Ç—å –≤ Telegram", f"https://t.me/{BOT_USERNAME}")
else:
    with st.container(border=True):
        st.subheader("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å")
        col1, col2 = st.columns([1,4], vertical_alignment="center")
        with col1:
            if tg_user.get("photo_url"):
                st.markdown(f'<img src="{tg_user["photo_url"]}" style="width:72px;height:72px;border-radius:50%;object-fit:cover"/>', unsafe_allow_html=True)
            else:
                initials = (tg_user.get("first_name") or "?")[:1]
                st.markdown(f'''
                  <div style="width:72px;height:72px;border-radius:50%;background:#EEE;display:flex;align-items:center;justify-content:center;font-weight:700">{initials}</div>
                ''', unsafe_allow_html=True)
        with col2:
            full_name = " ".join(filter(None, [tg_user.get("first_name"), tg_user.get("last_name")])) or "–ì–æ—Å—Ç—å"
            st.write(f"**{full_name}**")
            if tg_user.get("username"): st.write(f"@{tg_user['username']}")
            st.write(f"ID: `{tg_user.get('id')}`")
            if BOT_TOKEN:
                st.write("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏:", "‚úÖ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞" if is_valid else "‚ö†Ô∏è –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ")

# –ö–ª–∏–∫–µ—Ä
if "score" not in st.session_state: st.session_state.score = 0
colA, colB = st.columns(2)
with colA:
    if st.button("–ö–ª–∏–∫!"): st.session_state.score += 1
with colB:
    if st.button("–°–±—Ä–æ—Å"): st.session_state.score = 0
st.metric("–°—á—ë—Ç", st.session_state.score)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±–æ—Ç—É
payload = {
    "type": "clicker_result",
    "score": st.session_state.score,
    "user_id": tg_user.get("id") if tg_user else None,
    "ts": int(time.time())
}
payload_str = json.dumps(payload).replace("'", "\\'")

send_js = f"""
<script>
(function(){{
  function getWebApp(){{
    return (window.Telegram && window.Telegram.WebApp) ||
           (window.parent && window.parent.Telegram && window.parent.Telegram.WebApp) ||
           (window.top && window.top.Telegram && window.top.Telegram.WebApp) || null;
  }}
  const send = () => {{
    const W = getWebApp();
    if (!W || !W.sendData) return alert("–û—Ç–∫—Ä–æ–π—Ç–µ –≤–Ω—É—Ç—Ä–∏ Telegram, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.");
    W.sendData('{payload_str}');
    try {{ W.close(); }} catch(e) {{}}
  }};
  const hook = () => {{
    const btn = document.getElementById("sendToTelegramBtn");
    if (btn && !btn.__hooked) {{ btn.__hooked = true; btn.addEventListener("click", send); }}
    else setTimeout(hook, 300);
  }};
  hook();
}})();
</script>
"""
st.divider()
st.write("–ì–æ—Ç–æ–≤–æ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—Ç—É:")
st.markdown('<button id="sendToTelegramBtn" style="padding:.7rem 1.2rem;border-radius:.7rem;border:1px solid #ddd;cursor:pointer;">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram</button>', unsafe_allow_html=True)
st.components.v1.html(send_js, height=0)

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∞–≤–∞—Ç–∞—Ä
# –ß—Ç–æ–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–≤–∞—Ç–∞—Ä, –ª—É—á—à–µ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –±–æ—Ç–∞ (getUserProfilePhotos + getFile),
# —Å–∫–∞—á–∞—Ç—å –±–∞–π—Ç—ã –∏ –æ—Ç–¥–∞—Ç—å —Å –≤–∞—à–µ–≥–æ –±—ç–∫–µ–Ω–¥–∞/–ø—Ä–æ–∫—Å–∏ (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –≤ URL). –î–ª—è MVP –æ—Å—Ç–∞–≤–∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª—ã.
